<?php

/**
 * @file
 * Customize commerce modules behaviours for reiscout project needs.
 *
 * Implements address access control.
 *
 * Implementation path:
 * For each property create an individual product referencing the property
 *   Property  can be referenced only once by each product type
 *
 * On product add to cart calculate its price and set to line item
 *   https://drupalcommerce.org/discussions/2475/how-dynamically-calculate-sell-price-product-using-rules
 * A rule to Limit each product quantity to 1 and shows the message that product already in cart
 * Admin UI to set prices for new products and update for existed
 * API that get all purchased nids by user of given product type
 *   http://stackoverflow.com/questions/8148138/getting-all-products-owned-by-a-user
 * Access hook that show address only if it is purchased
 * Cart form alter that shows the right product type and only if it is not purchased already
 */

define('REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE', 'reiscout_property_address_access');
define('REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE', 'reiscout_property_address_access');

require_once 'reiscout_property_commerce.inc';

/**
 * List of fields to sell access to
 */
function reiscout_property_commerce_fields_access_to_sell() {
  return array(
    'field_address_text',
  );
}

/**
 * Implements hook_field_access.
 */
function reiscout_property_commerce_field_access($op, $field, $entity_type, $entity, $account) {

  // Show property address fields only for
  // - admin role
  // - property owner
  // - user purchased the address

  // Do nothing if current user is admin
  if ($account->uid == 1) {
    return;
  }

  // Access control for field_address in picture node.
  if ($op == 'view' && $entity_type == 'node' && !empty($entity->type) && $entity->type == REISCOUT_PROPERTY_COMMERCE_NODE_TYPE
  &&  in_array($field['field_name'], reiscout_property_commerce_fields_access_to_sell() ) ) {

    // Allow access if user is an author.
    if ($entity->uid == $account->uid) {
      return TRUE;
    }

    // Allow access if user purchased the node.
    if (reiscout_property_commerce_is_node_purchased($entity->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $account->uid)) {
      return TRUE;
    }

    // Deny access otherwise
    return FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function reiscout_property_commerce_form_property_node_form_alter(&$form, &$form_state, $form_id) {
  // Hide product selection on property node edit page.
  $form['field_product']['#access'] = FALSE;
}

/**
 * Implements hook_node_presave().
 */
function reiscout_property_commerce_node_presave($node) {
  // Assign products to property nodes on save.
  if (!$node->type == 'REISCOUT_PROPERTY_COMMERCE_NODE_TYPE') {
    return;
  }

}

function reiscout_property_commerce_form_alter(&$form, &$form_state, $form_id) {

  if ('commerce_cart_add_to_cart_form_1_2' == $form_id) {
    
    // Do nothing for admin
    if (user_access('administer site configuration')) {
      return;
    }

    $node = node_load($form_state['context']['entity_id']);
    $product_to_buy = '';
    // Check to allow user to buy owner info
    if ($node->uid == $GLOBALS['user']->uid
      && !reiscout_property_commerce_is_node_purchased ($node->nid, REISCOUT_PROPERTY_COMMERCE_OWNER_INFO_PRODUCT_TYPE, $GLOBALS['user']->uid)) {
      $product_to_buy = 'owner_info';
    }

    // Check to allow user to buy an address
    if ($node->uid != $GLOBALS['user']->uid
      && !reiscout_property_commerce_is_node_purchased ($node->nid, REISCOUT_PROPERTY_COMMERCE_ADDRESS_ACCESS_PRODUCT_TYPE, $GLOBALS['user']->uid)) {
      $product_to_buy = 'address';
    }

    if ($product_to_buy == 'owner_info') {
      $product_id = 0;
      $form['product_id']['#default_value'] = $product_id;
      $form['product_id']['#access'] = FALSE;
      $price = reiscout_property_commerce_get_owner_info_price();
      $form['submit']['#value'] = t('Request us to collect an Owner Info for @price @cur',
        array(
          '@price' =>  commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']),
          '@cur' => $price['currency_code'],
        )
      );
    } elseif ($product_to_buy == 'address') {
      $product_id = 0;
      $form['product_id']['#default_value'] = $product_id;
      $form['product_id']['#access'] = FALSE;

      $price = reiscout_property_commerce_get_property_address_price($node);
      $form['submit']['#value'] = t('Buy Property Address for @price @cur',
        array(
          '@price' => commerce_currency_amount_to_decimal($price['amount'], $price['currency_code']),
          '@cur' => $price['currency_code'],
        )
      );
    } else {
      $form['#access'] = FALSE;
    }
  }

}

function reiscout_property_commerce_init() {

}
